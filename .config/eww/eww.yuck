;; vars
(defpoll TIME :interval "1m" `scripts/time.sh`)
(defpoll DATE :interval "1m" `scripts/date.sh`)
(defpoll DATE_NAME :interval "1m" `scripts/date-name.sh`)

(defpoll UPTIME :interval "1s" `scripts/uptime.sh`)
(defpoll UPDATES :interval "5m" `scripts/updates.sh`)

(defpoll CPU_LOAD :interval "3s" :initial "0" `scripts/cpu.sh --load`)
(defpoll CPU_TEMP :interval "2s" `scripts/cpu.sh --temp`)

(defpoll MEMORY_PERCENT :interval "2s" :initial "0" `scripts/memory.sh --percentage`)
(defpoll MEMORY_NUMBERS :interval "2s" `scripts/memory.sh --numbers`)

(defpoll DISK_USED :interval "1m" :initial "0" `scripts/disk.sh --used`)
(defpoll DISK_TOTAL :interval "1m" :initial "0" `scripts/disk.sh --total`)
(defpoll DISK_PERCENTAGE :interval "1m" :initial "0" `scripts/disk.sh --percentage`)
(defpoll DISK_DOWNLOAD :interval "1m" :initial "0" `scripts/disk.sh --download`)
(defpoll DISK_UPLOAD :interval "1m" :initial "0" `scripts/disk.sh --upload`)

(defpoll ALBUM_ART :interval "5s" :initial "" `scripts/player.sh --album-art`)

(defpoll VOLUME_ICON :interval "1s" `scripts/volume.sh --icon`)
(defpoll VOLUME_VALUE :interval "1s" `scripts/volume.sh --value`)

(defpoll CALENDAR_DAY :interval "1h" `date '+%d'`)
(defpoll CALENDAR_YEAR :interval "1h" `date '+%Y'`)
(defpoll CALENDAR_MONTH :interval "1h" `date '+%m'`)

(deflisten trackAdditionalInfoOpened :initial "false" `scripts/player.sh --subscribe`)

;; widgets
(defwidget bg []
    (box :class "bg"))

(defwidget clock []
    (box :class "pad" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :valign "center" :spacing 8
        (label :class "time" :valign "center" :wrap "true" :text "${TIME}")
        (label :class "date" :valign "center" :wrap "true" :text "${DATE}")
        (label :class "weekday-month" :valign "center" :wrap "true" :text "${DATE_NAME}" )))

(defwidget uptime-updates []
    (box :class "pad" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :valign "center" :spacing 8
        (label :class "uptime" :halign "start" :valign "center" :wrap "true" :text "uptime: ${UPTIME}")
        (label :class "updates" :halign "start" :valign "center" :wrap "true" :text "updates: ${UPDATES}")))
        
(defwidget cpu-mem []
    (box :class "pad" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :valign "center" :spacing 8 
        (centerbox :class "cpu-box"
            (label :class "cpu-icon" :halign "center" :valign "center" :text "")
            (progress :class "cpu-progress hw-progress" :halign "start" :valign "center" :value "${CPU_LOAD}" :orientation "h")
            (label :class "cpu-value" :halign "center" :valign "center" :text "${CPU_LOAD}%"))
        (centerbox :class "mem-box"
            (label :class "mem-icon" :halign "center" :valign "center" :text "")
            (progress :class "mem-progress hw-progress" :halign "center" :valign "center" :value "${MEMORY_PERCENT}" :orientation "h")
            (label :class "mem-value" :halign "center" :valign "center" :text "${MEMORY_PERCENT}%"))))

(defwidget disk []
    (box :class "pad" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" :halign "center" :valign "center" :spacing 8
        (label :class "disk-icon" :halign "start" :valign "center" :wrap "true" :text "")
        (box :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :valign "center" :spacing 8
            (label :class "disk-label" :halign "start" :valign "center" :text "${DISK_USED}/${DISK_TOTAL} GiB ${DISK_PERCENTAGE}%")
            (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" :valign "center" :spacing 8
                (box :orientation "h" :space-evenly "false"
                    (label :class "disk-speed-icon" :halign "center" :valign "center" :text "")
                    (label :class "disk-value" :halign "end" :valign "center" :text "${DISK_UPLOAD} MiB/s"))
                (box :orientation "h" :space-evenly "false"
                    (label :class "disk-speed-icon" :halign "center" :valign "center" :text "")
                    (label :class "disk-value" :halign "end" :valign "center" :text "${DISK_DOWNLOAD} MiB/s"))))))

(defwidget calendarw []
    (box :class "pad" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :halign "center" :valign "center" :spacing 8 
        (calendar :class "cal" :width 325)))

(defwidget trackInfo []
    (box :class "pad" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :halign "center" :valign "center" :spacing 8
        (overlay
            (eventbox :onhover "scripts/player.sh --additional-open" :onhoverlost "scripts/player.sh --additional-close"
                (image :path "${ALBUM_ART}" :image-width 350 :image-height 350 :class "album-art"))
            (revealer :transition "slideup" :reveal "${trackAdditionalInfoOpened}" :duration 300 :valign "end"
                (box :class "additional-track-info" :height 100 :width 350
                    (label :text "lalallallal"))))))
    

;; windows
(defwindow time-date :stacking "fg" :focusable "false" :screen 0
    :geometry (geometry 
        :x 855
        :y 200
        :width 350
        :height 200
        :anchor "top left")
(clock))

(defwindow uptime-updates :stacking "fg" :focusable "false" :screen 0
    :geometry (geometry 
        :x 855
        :y 425
        :width 350
        :height 125
        :anchor "top left")
(uptime-updates))

(defwindow cpu-mem :stacking "fg" :focusable "false" :screen 0
    :geometry (geometry 
        :x 855
        :y 575
        :width 350
        :height 150
        :anchor "top left")
(cpu-mem))

(defwindow disk :stacking "fg" :focusable "false" :screen 0
    :geometry (geometry 
        :x 855
        :y 750
        :width 350
        :height 125
        :anchor "top left")
(disk))

(defwindow calendarw :stacking "fg" :focusable "false" :screen 0
    :geometry (geometry 
        :x 1230
        :y 200
        :width 350
        :height 305
        :anchor "top left")
(calendarw))

(defwindow trackInfo :stacking "fg" :focusable "false" :screen 0
    :geometry (geometry 
        :x 1230
        :y 530
        :width 350
        :height 350
        :anchor "top left")
(trackInfo))